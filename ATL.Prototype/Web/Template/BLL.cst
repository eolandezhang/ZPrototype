<%@ Template Language="C#" TargetLanguage="C#"  ResponseEncoding="UTF-8" %>
<%-- 加载访问数据库的组件SchemaExplorer,并声明其使用的命名空间 --%>
<%@ Assembly Name="SchemaExplorer"%>
<%@ Import Namespace="SchemaExplorer"%>

<%@ Property Type="SchemaExplorer.TableSchema" Name="SourceTable" DeepLoad="True" Optional="False" Category="表" Description="" %>

<%@ Property Name="NameSpace" Type="System.String" Default="" Optional="False" Category="命名空间" Description="" OnChanged="" Editor="" EditorBase="" Serializer="" %>
using Model.<%=this.NameSpace%>;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace BLL.<%=this.NameSpace%>
{
    public class <%=this.GetDALClassName()%>
    {    
        DAL.<%=this.NameSpace%>.<%=this.GetDALClassName()%> _<%=this.GetDALClassName()%> =new DAL.<%=this.NameSpace%>.<%=this.GetDALClassName()%>();
        DAL.Settings.Users _Users = new DAL.Settings.Users();
        #region 查询
        
        public List<<%=this.GetClassName()%>> GetData()
        {
            return _<%=this.GetDALClassName()%>.GetData();
        }
        
        public List<<%=this.GetClassName()%>> GetData(decimal pageSize, decimal pageNumber)
        {            
            return _<%=this.GetDALClassName()%>.GetData(pageSize, pageNumber);
        }
        
        public List<<%=this.GetClassName()%>> GetDataById(<%foreach(ColumnSchema col in SourceTable.PrimaryKey.MemberColumns){ %> <%=this.GetCSharpVariableType(col)%> <%=col.Name %><% if(SourceTable.PrimaryKey.MemberColumns.IndexOf(col.Name) < SourceTable.PrimaryKey.MemberColumns.Count - 1){%>,<% } %><% } %>,string queryStr)
        {
            return _<%=this.GetDALClassName()%>.GetDataById(<%foreach(ColumnSchema col in SourceTable.PrimaryKey.MemberColumns){ %><%=col.Name %><% if(SourceTable.PrimaryKey.MemberColumns.IndexOf(col.Name) < SourceTable.PrimaryKey.MemberColumns.Count - 1){%>,<% } %><% } %>, queryStr);
        }
        
        public bool GetDataValidateId(<%foreach(ColumnSchema col in SourceTable.PrimaryKey.MemberColumns){ %> <%=this.GetCSharpVariableType(col)%> <%=col.Name %><% if(SourceTable.PrimaryKey.MemberColumns.IndexOf(col.Name) < SourceTable.PrimaryKey.MemberColumns.Count - 1){%>,<% } %><% } %>)
        {
            return _<%=this.GetDALClassName()%>.GetDataValidateId(<%foreach(ColumnSchema col in SourceTable.PrimaryKey.MemberColumns){ %><%=col.Name %><% if(SourceTable.PrimaryKey.MemberColumns.IndexOf(col.Name) < SourceTable.PrimaryKey.MemberColumns.Count - 1){%>,<% } %><% } %>);
        }
        
        #endregion
        
        #region 新增
         
        public int PostAdd(<%=this.GetClassName()%> entity)
        { 
            entity.UPDATE_USER = _Users.GetData().Where(x => x.USERNAME == BLL.Settings.Users.GetADAccount()).First().DESCRIPTION;
            entity.UPDATE_DATE = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
            return _<%=this.GetDALClassName()%>.PostAdd(entity);
        }
   
        #endregion
    
        #region 修改
        
        public int PostEdit(<%=this.GetClassName()%> entity)
        {
            entity.UPDATE_USER = _Users.GetData().Where(x => x.USERNAME == BLL.Settings.Users.GetADAccount()).First().DESCRIPTION;
            entity.UPDATE_DATE = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
            return _<%=this.GetDALClassName()%>.PostEdit(entity);
        }
    
        #endregion
        
        #region 删除
        
        public int PostDelete(<%=this.GetClassName()%> entity)
        { 
            return _<%=this.GetDALClassName()%>.PostDelete(entity);
        }
    
        #endregion
    
    
    
   }
}
<script runat="template">
#region 获取数据访问类类名
public string GetDALClassName()
{ 
 return this.SourceTable.Name;
}
#endregion
        
#region 获取实体类类名
public string GetClassName()
{ 
 return this.SourceTable.Name+"_Entity";
}
#endregion

#region 获取列的数据类型
public string GetCSharpVariableType(ColumnSchema column)
{
 if (column.Name.EndsWith("TypeCode")) return column.Name;
 
 switch (column.DataType)
 {
  case DbType.AnsiString: return "string";
  case DbType.AnsiStringFixedLength: return "string";
  case DbType.Binary: return "byte[]";
  case DbType.Boolean: return "bool";
  case DbType.Byte: return "byte";
  case DbType.Currency: return "decimal";
  //case DbType.Date: return "DateTime";
  //case DbType.DateTime: return "DateTime";
  case DbType.Date: return "string";
  case DbType.DateTime: return "string";
  case DbType.Decimal: return "decimal";
  case DbType.Double: return "double";
  case DbType.Guid: return "Guid";
  case DbType.Int16: return "short";
  case DbType.Int32: return "int";
  case DbType.Int64: return "long";
  case DbType.Object: return "object";
  case DbType.SByte: return "sbyte";
  case DbType.Single: return "float";
  case DbType.String: return "string";
  case DbType.StringFixedLength: return "string";
  case DbType.Time: return "TimeSpan";
  case DbType.UInt16: return "ushort";
  case DbType.UInt32: return "uint";
  case DbType.UInt64: return "ulong";
  case DbType.VarNumeric: return "decimal";
  default:
  {
   return "__UNKNOWN__" + column.NativeType;
  }
 }
}
#endregion

#region 获取列的ORACLE数据类型
public string GetOracleVariableType(ColumnSchema column)
{
 if (column.Name.EndsWith("TypeCode")) return column.Name;
 
 switch (column.DataType)
 {
  case DbType.AnsiString: return "OracleType.VarChar";
  case DbType.AnsiStringFixedLength: return "OracleType.VarChar";
  case DbType.Binary: return "byte[]";
  case DbType.Boolean: return "bool";
  case DbType.Byte: return "byte";
  case DbType.Currency: return "OracleType.Number";
  //case DbType.Date: return "DateTime";
  //case DbType.DateTime: return "DateTime";
  case DbType.Date: return "OracleType.DateTime";
  case DbType.DateTime: return "OracleType.DateTime";
  case DbType.Decimal: return "OracleType.Number";
  case DbType.Double: return "OracleType.Number";
  case DbType.Guid: return "Guid";
  case DbType.Int16: return "OracleType.Number";
  case DbType.Int32: return "OracleType.Number";
  case DbType.Int64: return "OracleType.Number";
  case DbType.Object: return "object";
  case DbType.SByte: return "sbyte";
  case DbType.Single: return "OracleType.Number";
  case DbType.String: return "string";
  case DbType.StringFixedLength: return "OracleType.VarChar";
  case DbType.Time: return "OracleType.DateTime";
  case DbType.UInt16: return "OracleType.Number";
  case DbType.UInt32: return "OracleType.Number";
  case DbType.UInt64: return "OracleType.Number";
  case DbType.VarNumeric: return "OracleType.Number";
  default:
  {
   return "__UNKNOWN__" + column.NativeType;
  }
 }
}
#endregion
</script>